#–∑–∞–¥–∞—á–∏ –Ω–∞ –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Å leetcode

#704. Binary Search
#–≤–µ—Ä—Å–∏—è —Å –ø–æ–ª—É–æ—Ç–∫—Ä—ã—Ç—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º, —Ç–æ –µ—Å—Ç—å –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ [l, r), —Ç–æ –µ—Å—Ç—å –ø—Ä–∞–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É –º—ã –Ω–µ –≤–∫–ª—é—á–∞–µ–º
#—ç—Ç–æ –≤–∏–¥–Ω–æ –≤ right = mid 

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        ans = - 1#–æ—Ç–≤–µ—Ç 
        left, right = 0, len(nums)#–ª–µ–≤—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –Ω–∞—á–∞–ª–æ, –ø—Ä–∞–≤—ã–π –Ω–∞ –∫–æ–Ω–µ—Ü
        while left < right:#–ø–æ–∫–∞ —É–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–µ —Å–æ—à–ª–∏—Å—å 
            mid = (left + right) // 2#—Å–µ—Ä–µ–¥–∏–Ω–∞ 
            if nums[mid] == target: #–µ—Å–ª–∏ –º—ã —Å–µ—Ä–µ–¥–∏–Ω–æ–π –ø–æ–ø–∞–ª–∏ –≤ —Ç–∞—Ä–≥–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Å–µ—Ä–µ–¥–∏–Ω—É(–∏–Ω–¥–µ–∫—Å)
                return mid
            elif nums[mid] < target: #–µ—Å–ª–∏ —Å–µ—Ä–µ–¥–∏–Ω–∞ –º–µ–Ω—å—à–µ —Ç–∞—Ä–≥–µ—Ç–∞, —Ç–æ –¥–≤–∏–≥–∞–µ–º –ª–µ–≤—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å
                left = mid + 1
            else: 
                right = mid#–µ—Å–ª–∏ —Å–µ—Ä–µ–¥–∏–Ω–∞ –±–æ–ª—å—à–µ, –¥–æ –¥–≤–∏–≥–∞–µ–º –ø—Ä–∞–≤—ã–π
                
        return ans
    # l. r 
    # 2, 3 
    
#–≤–æ—Ç –±–æ–ª–µ–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –∏ —É—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –≥–¥–µ –º—ã –≤–∫–ª—é—á–∏–º –ø—Ä–∞–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        ans = - 1#–æ—Ç–≤–µ—Ç 
        left, right = 0, len(nums) - 1#–ª–µ–≤—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –Ω–∞—á–∞–ª–æ, –ø—Ä–∞–≤—ã–π –Ω–∞ –∫–æ–Ω–µ—Ü, -1 –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞, —á—Ç–æ–±—ã –∫—Ä–∞–µ–≤–æ–π
        #—Å–ª—É—á–∞–π –≤ –≤–∏–¥–µ 1 —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª—Å—è
        while left <= right: #–ø–æ–∫–∞ –ª–µ–≤—ã–π –º–µ–Ω—å—à–µ –ò–õ–ò —Ä–∞–≤–µ–Ω –ø—Ä–∞–≤–æ–º—É
            mid = (left + right) // 2#—Å–µ—Ä–µ–¥–∏–Ω–∞ 
            if nums[mid] == target: #–µ—Å–ª–∏ –º—ã —Å–µ—Ä–µ–¥–∏–Ω–æ–π –ø–æ–ø–∞–ª–∏ –≤ —Ç–∞—Ä–≥–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Å–µ—Ä–µ–¥–∏–Ω—É(–∏–Ω–¥–µ–∫—Å)
                return mid
            elif nums[mid] < target: #–µ—Å–ª–∏ —Å–µ—Ä–µ–¥–∏–Ω–∞ –º–µ–Ω—å—à–µ —Ç–∞—Ä–≥–µ—Ç–∞, —Ç–æ –¥–≤–∏–≥–∞–µ–º –ª–µ–≤—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å
                left = mid + 1
            else: 
                right = mid - 1#–µ—Å–ª–∏ —Å–µ—Ä–µ–¥–∏–Ω–∞ –±–æ–ª—å—à–µ, –¥–æ –¥–≤–∏–≥–∞–µ–º –ø—Ä–∞–≤—ã–π
                
        return ans

#35. Search Insert Position
#–≥–ª—è–Ω—É—Ç—å –ø—Ä–æ –ò–ù–í–ê–†–ò–ê–ù–¢, –∏ –ø–æ—á–µ–º—É –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ç–∞–∫ —á—Ç–æ left –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π
#time complexity O(log n), space O(1)
class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums) - 1#–ª–µ–≤—ã–π –∏ –ø—Ä–∞–≤—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å, –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å -1
        #—Ç–æ –µ—Å—Ç—å —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–∞–º –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –≤ —Ü–∏–∫–ª–µ –º—ã —à–ª–∏ –¥–æ –ø—Ä–∞–≤–æ–π –≥—Ä–∞–Ω–∏—Ü—ã
        #–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ 
        while left <= right: 
            mid = (right + left) // 2 
            if nums[mid] == target:
                return mid
            elif nums[mid] < target:
                left = mid + 1
            else: 
                right = mid - 1 
        return left
            
            
        #[1, 2, 3, 4, 5, 7], 6
        #[5, 7]
        #[]
        
#–æ–±—å—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É left(–ª–µ–≤—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å) –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∏–Ω–¥–µ–∫—Å –æ—Ç—Å—É—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
# üí° –ö–ª—é—á–µ–≤–∞—è –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å

# –ï—Å–ª–∏ target –±–æ–ª—å—à–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:
# left –±—É–¥–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø—Ä–∞–≤–æ, –ø–æ–∫–∞ –Ω–µ "–≤—ã—Å–∫–æ—á–∏—Ç" –∑–∞ right (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –≤—ã—à–µ).
# left = len(nums) ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –∫–æ–Ω–µ—Ü.
# –ï—Å–ª–∏ target –º–µ–Ω—å—à–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:
# right –±—É–¥–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ª–µ–≤–æ, –ø–æ–∫–∞ –Ω–µ —Å—Ç–∞–Ω–µ—Ç -1.
# left = 0 ‚Äî –≤—Å—Ç–∞–≤–∫–∞ –≤ –Ω–∞—á–∞–ª–æ.
# –ï—Å–ª–∏ target –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏:
# –ù–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ left –∏ right "—Å—Ö–ª–æ–ø–Ω—É—Ç—Å—è" –Ω–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö, –∏ left —É–∫–∞–∂–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, –±–æ–ª—å—à–∏–π target (–ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏).
# üìå –ü–æ—á–µ–º—É left = mid + 1 –¥–∞—ë—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å?

# –õ–æ–≥–∏–∫–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:
# –ù–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –º—ã –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª–æ–≤–∏–Ω—É –º–∞—Å—Å–∏–≤–∞, –≥–¥–µ target —Ç–æ—á–Ω–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å.
# –ï—Å–ª–∏ nums[mid] < target, —Ç–æ target –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø—Ä–∞–≤–∞ –æ—Ç mid ‚Üí left = mid + 1.
# –ï—Å–ª–∏ nums[mid] > target, —Ç–æ target –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–µ–≤–∞ –æ—Ç mid ‚Üí right = mid - 1.
# –ö–æ–≥–¥–∞ —ç–ª–µ–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç:
# –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ left –∏ right "–ø–µ—Ä–µ—Å–∫–∞–∫–∏–≤–∞—é—Ç" –¥—Ä—É–≥ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∞ (left > right).
# –í —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç left —É–∂–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –º–µ—Å—Ç–æ, –≥–¥–µ –¥–æ–ª–∂–µ–Ω —Å—Ç–æ—è—Ç—å target, —á—Ç–æ–±—ã –º–∞—Å—Å–∏–≤ –æ—Å—Ç–∞–ª—Å—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.

#278. First Bad Version
#time complexity O(log n), space O(1)
class Solution:
    def firstBadVersion(self, n: int) -> int:
        left, right = 0, n #–∏–ª–∏ 1, n 
        while left <= right: # <
            mid = (left + right) // 2 
            if isBadVersion(mid):
                right = mid - 1
            elif not isBadVersion(mid): #–º–æ–∂–Ω–æ –±—ã–ª–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ—Å—Ç–æ else
                left = mid + 1
        return left 
        #2 –≤–µ—Ä—Å–∏—è –ø–ª–æ—Ö–∞—è
        #[1, 2, 3, 4, 5] –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤, —É–±–∏—Ä–∞–µ–º 3, 4, 5, —Ç–∫ –º–∏–¥ –±—ã–ª 3 –∏ –≤—Å–µ –æ–Ω–∏ —É–∂–µ –ø–ª–æ—Ö–∏–µ
        #[1,2] –æ—Å—Ç–∞–µ—Ç—Å—è 1, 2, —Ç–∫ –º—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏ –ø—Ä–∞–≤—ã–π –Ω–∞ mid - 1
        #–º—ã –ø—Ä–æ–≤–µ—Ä–∏–º 1 –∏ –æ–Ω–∞ –Ω–µ –±—É–¥–µ—Ç –ø–ª–æ—Ö–æ–π –≤–µ—Ä—Å–∏–µ–π, –ø–æ—ç—Ç–æ–º—É –¥–≤–∏–≥–∞–µ–º –ª–µ–≤—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å 
        #–ª–µ–≤—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –Ω–∞ mid + 1 —á—Ç–æ —Ä–∞–≤–Ω—è–µ—Ç—Å—è 2, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–µ–≤—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å
        
        
# 367. Valid Perfect Square
class Solution:
    #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ int, —Ç–æ –µ—Å—Ç—å —á–∏—Å–ª–æ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ "—Å–æ—Å—Ç–æ–∏—Ç" –≤—Ö–æ–¥—è—â–µ–µ, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
    #time complexity O(log n), space O(1)
    def isPerfectSquare(self, num: int) -> bool:
        left, right = 1, num #–∏–¥–µ–º –ø–æ —Ü–µ–ª—ã–º —á–∏—Å–ª–∞–º –æ—Ç 1 –¥–æ —á–∏—Å–ª–∞ 
        while left <= right:#–ø–æ–∫–∞ –ª–µ–≤—ã–π –Ω–µ –≤—ã–π–¥–µ—Ç –∑–∞ –ø—Ä–∞–≤—ã–π
            mid = (left + right) // 2#—Å–µ—Ä–µ–¥–∏–Ω–∞ 
            if mid * mid == num: #–µ—Å–ª–∏ –¶–ï–õ–û–ï —á–∏—Å–ª–æ –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ(—Å–µ—Ä–µ–¥–∏–Ω–∞) –¥–∞–µ—Ç –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ, 
                #—Ç–æ —ç—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç
                return True
            elif mid * mid < num: #–µ—Å–ª–∏ —á–∏—Å–ª–æ –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ –º–µ–Ω—å—à–µ, —á–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ, —Ç–æ –ø–æ–¥–≤–∏–Ω–µ–º 
                #–ª–µ–≤—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å, —Ç–∫ –≤—Å–µ –º–µ–Ω—å—à–µ —á–∏—Å–ª–∞ —Ç–æ–∂–µ –º–µ–Ω—å—à–µ
                left = mid + 1 
            else: 
                right = mid - 1#–∏–Ω–∞—á–µ –µ—Å–ª–∏ –∫–≤–∞–¥—Ä–∞—Ç –±–æ–ª—å—à–µ, —Ç–æ —Å–º–æ—Ç—Ä–∏–º —á–∏—Å–ª–∞ –º–µ–Ω—å—à–µ
        return False #–µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ —Ä–∞–≤–Ω–æ–º—É –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–º—É
        #[1, 2, 3, 4, 5, 6, 7, 8, 9] –≥–¥–µ 9 –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–µ 
        #–ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∏–ª–æ—Å 5, –æ–Ω–æ –±–æ–ª—å—à–µ –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ —á–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ(25 > 9), –æ—Ç—Å–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –±–æ–ª—å—à–µ 5
        #[1, 2, 3, 4] –ø—Ä–æ–≤–µ—Ä—è–µ–º 2, –æ–Ω–æ –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ –º–µ–Ω—å—à–µ 9, —É–±–∏—Ä–∞–µ–º —á–∏—Å–ª–∞ 1, 2 
        #[3, 4] –ø—Ä–æ–≤–µ—Ä—è–µ–º 3, 3 —Å—Ö–æ–¥–∏—Ç—Å—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true 
    
    #–û–ø–∏—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏(–±–µ—Å–ø–æ–ª–µ–∑–Ω–æ –≤ —Ü–µ–ª–æ–º, –Ω–∞ –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ –ø–æ–≤–ª–∏—è–µ—Ç—Å—è)
    class Solution:
        def isPerfectSquare(self, num: int) -> bool:
            if num < 2: 
                return True #–µ—Å–ª–∏ —á–∏—Å–ª–æ - 1, —Ç–æ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–¥–∏–≤—ã–π
            
            left, right = 2, num // 2 # —ç–∫–æ–Ω–æ–º–∏–º 2 –∏—Ç–µ—Ä–∞—Ü–∏–∏, —Ç–∫ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –æ—Ç—Ä–µ–∑–∞–µ–º –ø–æ–ª–æ–≤–∏–Ω—É
            while left <= right:
                mid = (left + right) // 2
                squared = mid * mid
                if squared == num:
                    return True
                elif squared < num:
                    left = mid + 1
                else:
                    right = mid - 1

            return False
            


#[1,2,3,4,5,\6,7,8,9,10,11, 12]
#69. Sqrt(x)
#time complexity O( log n ), space O(1)
class Solution:
    def mySqrt(self, x: int) -> int:
        if x < 2: 
            return x # –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 2 —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∏—Å–ª–æ(1)
        
        left, right = 0, x #–Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü
        while left <= right: #–ø–æ–∫–∞ –Ω–µ —Å–æ–π–¥—É—Ç—Å—è
            
            mid = (left + right) // 2#—Å–µ—Ä–µ–¥–∏–Ω–∞
            square = mid * mid #–∫–≤–∞–¥—Ä–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            if square == x: #–µ—Å–ª–∏ –∫–≤–∞–¥—Ä–∞—Ç —Ä–∞–≤–µ–Ω x –≤–æ—â–≤—Ä–∞—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
                return mid
            elif square < x: #–µ—Å–ª–∏ –∫–≤–∞–¥—Ä–∞—Ç –º–µ–Ω—å—à–µ x, –ø—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å —á–∏—Å–ª–æ, –¥–∞—é—â–µ–µ –ø–µ—Ä–≤—ã–π –∫–≤–∞–¥—Ä–∞—Ç, 
                #–º–µ–Ω—å—à–∏–π —á–µ–º x
                left = mid + 1#–¥–≤–∏–≥–∞–µ–º –ª–µ–≤—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å –≤–ø—Ä–∞–≤–æ
            else: 
                right = mid - 1#–∏–Ω–∞—á–µ, –µ—Å–ª–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω –±–æ–ª—å—à–µ, –Ω—É–∂–Ω–µ–Ω –∫–≤–∞–¥—Ä–∞—Ç –º–µ–Ω—å—à
                
        return right #–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ –≤–Ω–∏–∑ —á–∏—Å–ª–æ 
        #–ø—Ä–∏–º–µ—Ä [1,2,3,4,5,6,7,8] x =8
        #–æ—Ç—Å–µ–∫–ª–∏ –±–æ–ª—å—à–∏–µ –∫–≤–∞–¥—Ä–∞—Ç—ã, –ø–æ–ª—É—á–∏–ª–æ—Å—å [1,2,3]
        #–ø—Ä–æ–≤–µ—Ä—è–µ–º 2, 2 ** 2 < x (8), –¥–≤–∏–≥–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω –ø—Ä–∞–≤–µ–µ(–æ—Ç—Å–µ–∫–∞–µ–º 1)
        #[2, 3], –ø—Ä–æ–≤–µ—Ä—è–µ–º 2 –æ–ø—è—Ç—å, –æ–Ω –º–µ–Ω—å—à–µ, –¥–≤–∏–≥–∞–µ–º –ª–µ–≤—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å –≤–ø–∞—Ä–∞–≤–æ
        #–æ—Å—Ç–∞–µ—Ç—Å—è [3], —Ç—É—Ç –¥–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è, –ø—Ä–∞–≤—ã–π –¥–≤–∏–≥–∞–µ–º –≤–ª–µ–≤–æ, —Ç–∫ 3 ** 3 > 8
        #–ø—Ä–∞–≤—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ 2, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 
        #—Ç–æ –µ—Å—Ç—å –∫–æ–≥–¥–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω—è—è –∏—Ç–µ—Ä–∞—Ü–∏—è, —Ç–æ –ø—Ä–∞–≤—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø–µ—Ä–≤—ã–π –∫–≤–∞–¥—Ä–∞—Ç, –º–µ–Ω—å—à–∏–π —á–µ–º x, —Ç–∫ 
        #–±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —É—Å–ª–æ–≤–∏–µ, —á—Ç–æ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –±–æ–ª—å—à–µ —á–µ–º x –∏ –º—ã –ø–æ–¥–≤–∏–Ω–µ–º –ø—Ä–∞–≤—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å –≤–ª–µ–≤–æ
            
#374. Guess Number Higher or Lower
#time complexity O(log n), space O(1)
class Solution:
    def guessNumber(self, n: int) -> int:
        left, right = 1, n #–ª–µ–≤—ã–π –ø—Ä–∞–≤—ã–π —É–∫–∞–∑–∞—Ç–µ–ª–∏
        while left <= right: 
            mid = (left + right) // 2
            if guess(mid) == 0: 
                return mid 
            elif guess(mid) == -1:
                right = mid - 1
            else: 
                left = mid + 1
        return -1#–µ—Å–ª–∏ –±—ã –º—ã –Ω–µ –Ω–∞—à–ª–∏, –Ω–æ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç 1 <= peak <= n 
    